#!/bin/bash
# config

tmux_session_name="multi-ssh"
MAX=20
NEW_WINDOW=0
AWS_PROFILE="staging"

usage() {
    echo $1
    echo
    echo 'tmux.multi: [OPTION]'
    echo 'Creates a tmux session with synchronised panes across multiple server'
    echo
    echo 'Options: '
    echo '  -d <list of instances ids or ips>: List '
    echo '  -r <role>: Role to open. Instances are sorted by instance id'
    echo '  -c <cluster>: Cluster to target'
    echo '  -p <profile>: aws-vault profile to use, default to "staging"'
    echo '  -m <max>: Maximum number of pane or window to open. Default is 20'
    echo '  -w: Open window instead of pane'
    echo
    echo 'Examples: '
    echo '   -d "serv0 serv1 serv2 ... servN"  : list serv to connect to'
    echo '   -r compute-general -c poodle -m3: Connect to the 3 first compute-general instances of poodle'
    exit 0
}

lookup_node_aws ()
{
    aws-vault exec $AWS_PROFILE -- aws ec2 describe-instances --region=us-east-1 --filter "Name=tag:kubernetes_cluster,Values=$1" "Name=tag:kubernetes_role,Values=$2" --query 'Reservations[*].Instances[*].PrivateDnsName' | jq '.[][]' -r
}

lookup_node_gcp ()
{
    gcloud compute instances list --format json | jq ".[] | select( (.labels.role == \"$2\" and .labels.kubernetes_cluster==\"$1\" ) ) | .networkInterfaces[0].networkIP " -r
    #gcloud compute instances list --filter="labels.kubernetes_role=$2 AND labels.kubernetes_cluster=$1" --format="csv[no-heading](networkInterfaces[].networkIP)"
}

starttmux() {
    local session_name="$1"
    local hosts=()
    compteur=0
    LST=$(echo ${HOSTS} | sed -n 1'p' | tr ',' '\n')
    for i in ${LST}
    do
        ((compteur++))
        if [[ "$compteur" -gt "$MAX" ]]; then
            break
        fi
        hosts+=("$i")
    done
    local windowname=$session_name
    tmux -u new-session -d -s "$session_name" -n "${windowname}" "ssh ddeng@${hosts[0]}"
    unset hosts[0];
    local index=2
    for i in "${hosts[@]}"
    do
        if [[ "$NEW_WINDOW" -eq 1 ]]; then
            tmux new-window -t "${session_name}:$index" "ssh ddeng@$i"
            ((index+=1))
        else
            tmux split-window -t :"${windowname}" -h "ssh ddeng@$i"
            tmux select-layout -t :"${windowname}" tiled > /dev/null
        fi
    done
    if [[ "$NEW_WINDOW" -eq 0 ]]; then
        tmux select-pane -t 0
        tmux set-window-option -t :"${windowname}"  synchronize-panes on > /dev/null
    fi
    tmux send-keys -t :"${windowname}" "PS1=\"\[\033[01;31m\]\u\[\033[01;33m\]@\[\033[01;37m\]\h\[\033[01;36m\][\[\033[01;32m\]$AWS_PROFILE\[\033[01;36m\]]\[\033[01;36m\][\[\033[01;32m\]$CLUSTER;$ROLE\[\033[01;36m\]]\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ \"" Enter
}

checkopt() {
    if [ ! -z "$ROLE" ] && [ ! -z "$CLUSTER" ] ; then
        if [[ $(kubectl config view -o=jsonpath='{.current-context}') = *"eu1"* ]]; then
            HOSTS=$(lookup_node_gcp $CLUSTER $ROLE)
        else
            HOSTS=$(lookup_node_aws $CLUSTER $ROLE)
        fi
    fi
    if [ -z "$HOSTS" ] ; then
        usage "Please provide of list of hosts with -d option."
    fi
    local host_title=$(echo $HOSTS | tr " ." "_")
    tmux_session_name="${tmux_session_name}_${host_title}"
    tmux_session_name="${tmux_session_name:0:32}"
    if [ -z "$TMUX" ]; then # if not in a tmux session create one
    # check that there is not an other session with same name
    compteur=0
    for session in $(tmux ls | awk '{print substr($1, 1, length($1)-1)}')
    do
        ((compteur++))
        if [ "$session" = "$tmux_session_name" ]; then
        tmux_session_name=$tmux_session_name"_"$compteur
        fi
    done
    fi
    starttmux "$tmux_session_name"
    tmux a -dt "$tmux_session_name"
}

while getopts "u:d:r:m:c:p:hw" o; do
        case "${o}" in
        h)
            usage
            ;;
        w)
            NEW_WINDOW=1
            ;;
        c)
            CLUSTER=${OPTARG}
            ;;
        m)
            MAX=${OPTARG}
            ;;
        d)
            HOSTS=${OPTARG}
            ;;
        p)
            AWS_PROFILE=${OPTARG}
            ;;
        r)
            ROLE=${OPTARG}
            ;;
        esac
done
checkopt
