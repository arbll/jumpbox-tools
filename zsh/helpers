#!/bin/zsh 

environmentlc(){
    cat /opt/datadog/etc/environment | cut -c 5-
}

environmentuc(){
    cat /opt/datadog/etc/environment | cut -c 5- | tr '[a-z]' '[A-Z]'
}

vpc_tag(){
    ip=$(myip)
    if [[ "$ip" == 172.* ]]; then
        echo "VPC"
    else
        echo "Classic"
    fi
}

maintags(){
    cat /etc/update-motd.d/95-roles | sed -e '1,/Tags/d' | head -n-1 | sort -t\: -k2 -n | awk -F: '{ if (el[$1] == "") { el[$1]=$2; } else el[$1]=el[$1]","$2 } END {for (i in el) {printf( i":"el[i]"\n" ) } } ' | paste -d',' -s -
}

mainroles(){
    cat /etc/update-motd.d/95-roles | awk '/Roles/{a=1;next}/Tags/{a=0}a' | grep -Ev "^$|encrypted-storage|agent-prod-to-staging|canary-security-logging|go-perf|dog-base|process-agent|agent6" | paste -d',' -s - 
}

refreshtools(){
    cd ~/.jumpbox-tools
    git pull
    ./installs.sh
    ./links.sh
    cd -
    exec zsh
}

instance_to_ip() {
    local instance="$1"
    consul-cli health service datadog | jq -r ".[] | select ( .[].Node == \"$instance\" ) | .Address "
}

update_tmux_window_format() {
    local ip="$1"
    local role="$(tags_from_ip $ip)"
    if [ -n "$TMUX" ]; then
        tmux -q setw window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] ${role}:#W" > /dev/null
        tmux -q setw window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] ${role}:#W" > /dev/null
    fi
}

do_ssh () {
    local ip="$1"
    update_tmux_window_format "$ip"
    ssh -A $ip
    update_tmux_window_format $(myip)
}

jr(){
    local ip=$(consul-cli health service datadog --tag="$1" | jq -r ".[].Node.Address" | head -1)
    if [[ -z "$ip" ]]; then 
        echo "Unkown role"
        return 1
    fi
    ~/.jumpbox-tools/deploy_tools $ip
    update_tmux_window_format $ip
    do_ssh $ip
}

ji(){
    local ip="$1"
    if [[ "$ip" != 1* ]]; then 
        ip=$(instance_to_ip $1)
    fi
    if [[ -z "$ip" ]]; then
        echo "No ip for $1"
        return 1
    fi
    ~/.jumpbox-tools/deploy_tools $ip
    update_tmux_window_format $ip
    do_ssh $ip
}

jt(){
    local instance=$(echo $1 | awk -F"_" '{print $2}')
    ji $instance
}

_excluded_tags=". != \"dd-process-agent\" and . != \"agent-prod-to-staging\" and . != \"gitlab-jumpbox-runner\" and . != \"dd-security-logging\" and . != \"canary-security-logging\" and . != \"agent6\" and . != \"process-agent\" and . != \"dog-base\" and . != \"go-perf\" and (contains(\"az-\") | not)"

tags_from_ip() {
    consul-cli catalog service datadog | jq -r -c ".[] | select ( .Address | . == \"$1\" ) | .ServiceTags | map(select($_excluded_tags) ) | join(\",\") "
}

tags_from_host() {
    consul-cli catalog service datadog | jq -r -c ".[] | select ( .Node | . == \"$1\" ) | .ServiceTags | map(select($_excluded_tags) ) | join(\",\") "
}

chosts_by_role() {
    consul-cli catalog service datadog --tag="$1" | jq -r ".[].Node" | sort | uniq
}

cip_by_role() {
    consul-cli catalog service datadog --tag="$1" | jq -r ".[].Address" | sort | uniq
}

cip_postgres_by_role_and_active() {
    consul-cli catalog service postgres --tag="${1}-${2}" | jq -r ".[].Node" | sort | uniq
}

chost_postgres_by_role_and_active() {
    consul-cli catalog service postgres --tag="${1}-${2}" | jq -r ".[].Address" | sort | uniq
}

chosts_by_role_classic() {
    consul-cli catalog service datadog --tag="$1" | jq -r ".[] | select ( .Address | startswith(\"10\") ) | .Node "
}

chosts_by_role_vpc() {
    consul-cli catalog service datadog --tag="$1" | jq -r ".[] | select ( .Address | startswith(\"172\") ) | .Node "
}

cinstance_from_ip() {
    consul-cli catalog service datadog | jq -r ".[] | select ( .Address | . == \"$1\" ) | .Node "
}

cip_by_role_and_pshard() {
    knife search node "role:$1 AND tags:pshard\\:$2" -a ipaddress -F json | jq ".rows[][][] " -c -r
}

cip_by_role_and_ctxpshard() {
    knife search node "role:$1 AND tags:master_id\\:ctx-pshard$2" -a ipaddress -F json | jq ".rows[][][] " -c -r
}

cip_by_role_and_kafka_cluster_and_topic() {
    knife search node "role:$1 AND tags:kafka_cluster\\:$2 AND tags:kafka_topic\\:$3" -a ipaddress -F json | jq ".rows[][][] " -c -r
}

cip_by_role_and_kafka_topic() {
    knife search node "role:$1 AND tags:kafka_topic\\:$2" -a ipaddress -F json | jq ".rows[][][] " -c -r
}

cip_by_role_and_kafka_topic_and_partition() {
    knife search node "role:$1 AND tags:kafka_topic\\:$2 AND tags:kafka_partition\\:$3" -a ipaddress -F json | jq ".rows[][][] " -c -r
}

chost_by_role_and_pshard() {
    knife search node "role:$1 AND tags:pshard\\:$2" -a ipaddress -F json | jq ".rows[] | keys[] " -c -r
}

chost_by_role_and_ctxpshard() {
    knife search node "role:$1 AND tags:master_id\\:ctx-pshard$2" -a ipaddress -F json | jq ".rows[] | keys[] " -c -r
}

chost_by_role_and_kafka_cluster_and_topic() {
    knife search node "role:$1 AND tags:kafka_cluster\\:$2 AND tags:kafka_topic\\:$3" -a ipaddress -F json | jq ".rows[] | keys[] " -c -r
}

chost_by_role_and_kafka_topic() {
    knife search node "role:$1 AND tags:kafka_topic\\:$2" -a ipaddress -F json | jq ".rows[] | keys[] " -c -r
}

chost_by_role_and_kafka_topic_and_partition() {
    knife search node "role:$1 AND tags:kafka_topic\\:$2 AND tags:kafka_partition\\:$3" -a ipaddress -F json | jq ".rows[] | keys[] " -c -r
}

pg() {
    sudo -u postgres psql -p 5433 dogdata$(environmentlc)
}

app_to_pod () {
    kubectl get po -n $2 -o wide | grep $1 | head -n1 | awk '{print $1}'
}

app_to_node () {
    k get pod --all-namespaces -owide | grep $1 | head -n1 | awk '{print $8}'
}

agent_on_node () {
    k get pod -ndatadog-system -owide -lapp=datadog-agent | grep $1 | awk '{print $1}'
}

agent_along_app () {
    node=$(app_to_node $1)
    agent_on_node $node
}

connect_to_agent_along_app () {
    pod=$(agent_along_app $1)
    echo "Connecting to $pod"
    connect_to_pod $pod
}

connect_to_app () {
    ns=$(k get pod --all-namespaces | grep $1 | head -n1 | awk '{print $1}')
    k exec -n $ns $(app_to_pod $1 $ns)  -it -- /bin/bash
}

toolbox_to_pod () {
    kubectl get po -n datadog -o wide -l run=$1 | awk '{print $1}' | grep $1 | head -n1
}

connect_to_toolbox () {
    k exec $(toolbox_to_pod bonnefoa-toolbox)  -it -- /bin/bash
}

connect_to_pod () {
    ns=$(k get pod --all-namespaces | grep $1 | head -n1 | awk '{print $1}')
    k exec -n $ns $1 -it -- /bin/bash
}

connect_to_app_node () {
    ssh ddeng@$(k get po -o=jsonpath='{.items[0].spec.nodeName}' -l app=$1)
}

delete_pod () {
    k delete po -l app=$1
}

exec_on_pod () {
    local pod=$1
    shift 1
    k exec $pod -it -- $@
}

spinnaker_ip () {
    aws-vault exec build-stable-admin -- aws ec2 describe-instances --region=us-east-1 --filter "Name=tag:Name,Values=spinnaker-spinnaker" --query 'Reservations[*].Instances[*].PrivateIpAddress' | jq '.[][]' -r
}

connect_to_spinnaker () {
    spinnaker_ip
    ssh ddeng@$(spinnaker_ip)
}

connect_to_clouddriver () {
    clouddriver_ip
    ssh ddeng@$(clouddriver_ip)
}

clouddriver_ip () {
    aws-vault exec build-stable-admin -- aws ec2 describe-instances --region=us-east-1 --filter "Name=tag:Name,Values=spinnaker-clouddriver" --query 'Reservations[*].Instances[*].PrivateDnsName' | jq '.[][]' -r
}

gosource() {
    export PATH=~/code/bin:~/go/bin:$PATH
    export GOPATH=~/code
    export GOROOT=~/go
}

goinstall() {
    cd ~
    rm -rf ~/go
    rm -f go*tar.gz
    wget https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz
    tar zxf go1.10.3.linux-amd64.tar.gz -C ~/
    rm -rf ~/code
    mkdir -p ~/code/src/github.com/DataDog

    git clone git@github.com:DataDog/dd-go ~/code/src/github.com/DataDog/dd-go
    git clone git@github.com:DataDog/raclette ~/code/src/github.com/DataDog/raclette
    gosource

    go get github.com/robfig/glock
    cd -
}

knife () {
    /usr/bin/knife $1 -c /etc/chef/knife.rb ${@:2}
}

mybrokerid() {
    grep "broker.id=" /usr/local/kafka/config/server.properties | sed 's/^broker.id=//'
}

myip() {
    ip addr show $(ifconfig | head -n1 | awk '{print $1}') | grep -oP 'inet 1\d+.\d+.\d+.\d+' | cut -c 6-
}

ff() {
    find . -iname "*$1*"
}

lastoffset(){
    topic=$1
    partition=$2
    sudo -u kafka /usr/local/kafka/kafka_*/bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list "$(myip):9092" --topic $topic --partitions $partition --time -1
}

resource(){
    source ~/.zshenv
    source ~/.zshrc
}

ksearch() {
    knife search node $1 -a ec2.placement_availability_zone -a ec2.instance_type -a tags -a roles -a uptime_in_seconds
}
